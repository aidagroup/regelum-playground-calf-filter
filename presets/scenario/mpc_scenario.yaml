_target_: regelum.scenario.MPC



spot_mean_center_x%%: 0.5
spot_mean_center_y%%: 0.5
spot_std%%: 0.1

running_objective:
  # _target_: regelum.objective.RunningObjective

  _target_: src.objective.ThreeWheeledRobotCostWithSpot
  quadratic_model:
    _target_: regelum.model.ModelQuadLin

    weights: = numpy.array(${.R1_diag%%})
    quad_matrix_type: diagonal
    is_with_linear_terms: False
    R1_diag%%: = [1., 10., 0.1, 0., 0.]    
  # weights: = [1, 10, 0.1, 0, 0]
  gaussian_gain: 100
  gaussian_mean: = [${scenario.spot_mean_center_x%%}, ${scenario.spot_mean_center_y%%}]
  gaussian_std: = ${scenario.spot_std%%}
prediction_horizon: 3
predictor:
  _target_: regelum.predictor.EulerPredictor
  system: ~ system
  pred_step_size: $ common.sampling_time
simulator: ~ simulator
sampling_time: $ common.sampling_time